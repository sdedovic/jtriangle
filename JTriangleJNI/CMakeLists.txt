CMAKE_MINIMUM_REQUIRED(VERSION 3.1)
PROJECT(JTriangle)
SET(JTRIANGLE_VERSION 0.1.6)

if (CMAKE_HOST_WIN32)
    SET(JTRIANGLE_OS "windows")
ELSEIF (CMAKE_HOST_APPLE)
    SET(CMAKE_MACOSX_RPATH FALSE)
    SET(JTRIANGLE_OS "apple")
ELSEIF (CMAKE_HOST_UNIX)
    SET(JTRIANGLE_OS "linux")
ENDIF ()

if (CMAKE_SYSTEM_PROCESSOR MATCHES "ppc*")
    if (CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(JTRIANGLE_ARCH "ppc_64")
    endif ()
elseif (CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64")
    if (CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(JTRIANGLE_ARCH "aarch64")
    endif ()
else ()
    if (CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(JTRIANGLE_ARCH "x86_64")
    else ()
        set(JTRIANGLE_ARCH "x86")
    endif ()
endif ()

set(JTRIANGLE_NATIVE_LIBRARY_DIRECTORY ../nativeLibraries/${JTRIANGLE_OS}/${JTRIANGLE_ARCH}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/${JTRIANGLE_NATIVE_LIBRARY_DIRECTORY})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/${JTRIANGLE_NATIVE_LIBRARY_DIRECTORY})


FIND_PACKAGE(JNI REQUIRED)

INCLUDE_DIRECTORIES(${JNI_INCLUDE_DIRS})

ADD_LIBRARY(jtriangle SHARED
        src/JTriangle.cpp
        src/triangle/triangle.c

        src/triangle/triangle.h
        src/JTriangle.h
        )

ADD_COMPILE_DEFINITIONS(
        REAL=float
        SINGLE
        TRILIBRARY
        ANSI_DECLARATORS
        VOID=void
)

set_target_properties(jtriangle PROPERTIES
        CXX_STANDARD 11
        CXX_EXTENSIONS ON
        CXX_STANDARD_REQUIRED ON
        OUTPUT_NAME ${PROJECT_NAME}-${JTRIANGLE_VERSION}-${JTRIANGLE_OS}-${JTRIANGLE_ARCH})

